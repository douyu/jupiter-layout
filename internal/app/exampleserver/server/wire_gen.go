// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/douyu/jupiter-layout/internal/app/exampleserver/service"
	"github.com/douyu/jupiter-layout/internal/pkg/grpc"
	"github.com/douyu/jupiter-layout/internal/pkg/mysql"
	"github.com/douyu/jupiter-layout/internal/pkg/redis"
	"github.com/douyu/jupiter-layout/internal/pkg/resty"
	"github.com/douyu/jupiter-layout/internal/pkg/rocketmq"
	"github.com/douyu/jupiter/pkg/core/application"
)

// Injectors from wire.go:

func NewApp() (*App, error) {
	applicationApplication := application.DefaultApp()
	exampleInterface := grpc.NewExample()
	mysqlExampleInterface := mysql.NewExample()
	redisExampleInterface := redis.NewExample()
	restyExampleInterface := resty.NewExample()
	rocketmqExampleInterface := rocketmq.NewInstance()
	options := service.Options{
		ExampleGrpc:     exampleInterface,
		ExampleMysql:    mysqlExampleInterface,
		ExampleRedis:    redisExampleInterface,
		ExampleResty:    restyExampleInterface,
		ExampleRocketMQ: rocketmqExampleInterface,
	}
	helloWorld := service.NewHelloWorldService(options)
	httpServer := NewHttpServer(helloWorld)
	grpcServer := NewGrpcServer(helloWorld)
	server := NewGovernServer()
	rocketMQ := NewRocketMQ()
	serverOptions := Options{
		app:      applicationApplication,
		http:     httpServer,
		grpc:     grpcServer,
		govern:   server,
		rocketmq: rocketMQ,
	}
	app, err := newApp(serverOptions)
	if err != nil {
		return nil, err
	}
	return app, nil
}
